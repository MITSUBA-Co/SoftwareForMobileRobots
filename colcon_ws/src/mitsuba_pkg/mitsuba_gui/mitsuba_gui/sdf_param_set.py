#!/usr/bin/env python3
# Copyright 2024 MITSUBA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Jun 12, 2023 03:33:35 PM JST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import xml.etree.ElementTree as ET
from ament_index_python.packages import get_package_share_directory

_script = sys.argv[0]
_location = os.path.dirname(_script)


_bgcolor = "#d9d9d9"  # X11 color: 'gray85'
_fgcolor = "#000000"  # X11 color: 'black'
_compcolor = "gray40"  # X11 color: #666666
_ana1color = "#c3c3c3"  # Closest X11 color: 'gray76'
_ana2color = "beige"  # X11 color: #f5f5dc
_tabfg1 = "black"
_tabfg2 = "black"
_tabbg1 = "grey75"
_tabbg2 = "grey89"
_bgmode = "light"

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    if sys.platform == "win32":
        style.theme_use("winnative")
    style.configure(".", background=_bgcolor)
    style.configure(".", foreground=_fgcolor)
    style.configure(".", font="TkDefaultFont")
    style.map(".", background=[("selected", _compcolor), ("active", _ana2color)])
    if _bgmode == "dark":
        style.map(".", foreground=[("selected", "white"), ("active", "white")])
    else:
        style.map(".", foreground=[("selected", "black"), ("active", "black")])
    _style_code_ran = 1


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
        top is the toplevel containing window."""

        # top.geometry("640x400+583+400")
        # top.minsize(120, 1)
        # top.maxsize(3844, 1181)
        # top.resizable(1,  1)
        # top.title("SDF_UPDATE")
        # top.configure(background="#d9d9d9")
        # top.configure(highlightbackground="#d9d9d9")
        # top.configure(highlightcolor="black")

        self.top = top
        mitsuba_sim = get_package_share_directory("mitsuba_sim")
        self.sdf = os.path.join(mitsuba_sim, "sdf", "models")

        _style_code()
        self.link_name = ttk.Entry(self.top)
        self.link_name.place(relx=0.234, rely=0.075, relheight=0.045, relwidth=0.209)
        self.link_name.configure(takefocus="")
        self.link_name.configure(cursor="arrow")
        # self.sdf_path = ttk.Entry(self.top)
        # self.sdf_path.place(relx=0.234, rely=0.075, relheight=0.045
        #        , relwidth=0.209)
        # self.sdf_path.configure(takefocus="")
        # self.sdf_path.configure(cursor="arrow")
        # self.joint_name = ttk.Entry(self.top)
        # self.joint_name.place(relx=0.234, rely=0.175, relheight=0.050
        #        , relwidth=0.209)
        # self.joint_name.configure(takefocus="")
        # self.joint_name.configure(cursor="arrow")
        self.x_position = ttk.Entry(self.top)
        self.x_position.place(relx=0.703, rely=0.075, relheight=0.045, relwidth=0.209)
        self.x_position.configure(takefocus="")
        self.x_position.configure(cursor="arrow")
        self.y_position = ttk.Entry(self.top)
        self.y_position.place(relx=0.703, rely=0.15, relheight=0.045, relwidth=0.209)
        self.y_position.configure(takefocus="")
        self.y_position.configure(cursor="arrow")
        # self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        # top.configure(menu = self.menubar)

        # self.TLabel1 = ttk.Label(self.top)
        # self.TLabel1.place(relx=0.094, rely=0.075, height=19, width=73)
        # self.TLabel1.configure(background="#d9d9d9")
        # self.TLabel1.configure(foreground="#000000")
        # self.TLabel1.configure(font="TkDefaultFont")
        # self.TLabel1.configure(relief="flat")
        # self.TLabel1.configure(anchor='w')
        # self.TLabel1.configure(justify='left')
        # self.TLabel1.configure(text='''SDF PATH''')
        # self.TLabel1.configure(compound='left')
        self.TLabel2 = ttk.Label(self.top)
        self.TLabel2.place(relx=0.094, rely=0.075, height=19, width=73)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor="w")
        self.TLabel2.configure(justify="left")
        self.TLabel2.configure(text="""Link Name""")
        self.TLabel2.configure(compound="left")
        self.TLabel2.configure(cursor="arrow")
        self.TLabel3 = ttk.Label(self.top)
        self.TLabel3.place(relx=0.594, rely=0.075, height=19, width=47)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor="w")
        self.TLabel3.configure(justify="left")
        self.TLabel3.configure(text="""X座標""")
        self.TLabel3.configure(compound="left")
        self.TLabel4 = ttk.Label(self.top)
        self.TLabel4.place(relx=0.594, rely=0.15, height=19, width=46)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor="w")
        self.TLabel4.configure(justify="left")
        self.TLabel4.configure(text="""Y座標""")
        self.TLabel4.configure(compound="left")
        self.TLabel5 = ttk.Label(self.top)
        self.TLabel5.place(relx=0.594, rely=0.225, height=19, width=47)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor="w")
        self.TLabel5.configure(justify="left")
        self.TLabel5.configure(text="""Z座標""")
        self.TLabel5.configure(compound="left")
        self.z_position = ttk.Entry(self.top)
        self.z_position.place(relx=0.703, rely=0.225, relheight=0.045, relwidth=0.209)
        self.z_position.configure(takefocus="")
        self.z_position.configure(cursor="arrow")
        self.roll_position = ttk.Entry(self.top)
        self.roll_position.place(relx=0.703, rely=0.3, relheight=0.045, relwidth=0.209)

        self.roll_position.configure(takefocus="")
        self.roll_position.configure(cursor="arrow")
        self.pitch_position = ttk.Entry(self.top)
        self.pitch_position.place(relx=0.703, rely=0.375, relheight=0.045, relwidth=0.209)
        self.pitch_position.configure(takefocus="")
        self.pitch_position.configure(cursor="arrow")
        self.TLabel6 = ttk.Label(self.top)
        self.TLabel6.place(relx=0.594, rely=0.3, height=19, width=37)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor="w")
        self.TLabel6.configure(justify="left")
        self.TLabel6.configure(text="""Roll""")
        self.TLabel6.configure(compound="left")
        self.TLabel7 = ttk.Label(self.top)
        self.TLabel7.place(relx=0.594, rely=0.375, height=19, width=50)
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="TkDefaultFont")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor="w")
        self.TLabel7.configure(justify="left")
        self.TLabel7.configure(text="""Pitch""")
        self.TLabel7.configure(compound="left")
        self.TLabel8 = ttk.Label(self.top)
        self.TLabel8.place(relx=0.594, rely=0.45, height=19, width=50)
        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font="TkDefaultFont")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor="w")
        self.TLabel8.configure(justify="left")
        self.TLabel8.configure(text="""Yaw""")
        self.TLabel8.configure(compound="left")
        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.422, rely=0.775, height=24, width=87)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=self.update_pose)
        self.Button1.configure(compound="left")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text="""SDF UPDATE""")
        self.yaw_position = ttk.Entry(self.top)
        self.yaw_position.place(relx=0.703, rely=0.45, relheight=0.045, relwidth=0.209)
        self.yaw_position.configure(takefocus="")
        self.yaw_position.configure(cursor="arrow")
        # self.TLabel16 = ttk.Label(self.top)
        # self.TLabel16.place(relx=0.078, rely=0.175, height=17, width=85)
        # self.TLabel16.configure(background="#d9d9d9")
        # self.TLabel16.configure(foreground="#000000")
        # self.TLabel16.configure(font="TkDefaultFont")
        # self.TLabel16.configure(relief="flat")
        # self.TLabel16.configure(anchor='w')
        # self.TLabel16.configure(justify='left')
        # self.TLabel16.configure(text='''Joint Name''')
        # self.TLabel16.configure(compound='left')
        self.wheel_separation = ttk.Entry(self.top)
        self.wheel_separation.place(relx=0.703, rely=0.6, relheight=0.045, relwidth=0.209)
        self.wheel_separation.configure(takefocus="")
        self.wheel_separation.configure(cursor="arrow")
        self.wheel_radius = ttk.Entry(self.top)
        self.wheel_radius.place(relx=0.703, rely=0.675, relheight=0.045, relwidth=0.209)
        self.wheel_radius.configure(takefocus="")
        self.wheel_radius.configure(cursor="arrow")
        self.TLabel17 = ttk.Label(self.top)
        self.TLabel17.place(relx=0.5, rely=0.6, height=15, width=120)
        self.TLabel17.configure(background="#d9d9d9")
        self.TLabel17.configure(foreground="#000000")
        self.TLabel17.configure(font="TkDefaultFont")
        self.TLabel17.configure(relief="flat")
        self.TLabel17.configure(anchor="w")
        self.TLabel17.configure(justify="left")
        self.TLabel17.configure(text="""Wheel separation""")
        self.TLabel17.configure(compound="left")
        self.TLabel18 = ttk.Label(self.top)
        self.TLabel18.place(relx=0.531, rely=0.675, height=15, width=86)
        self.TLabel18.configure(background="#d9d9d9")
        self.TLabel18.configure(foreground="#000000")
        self.TLabel18.configure(font="TkDefaultFont")
        self.TLabel18.configure(relief="flat")
        self.TLabel18.configure(anchor="w")
        self.TLabel18.configure(justify="left")
        self.TLabel18.configure(text="""Wheel radius""")
        self.TLabel18.configure(compound="left")
        self.TLabel19 = ttk.Label(self.top)
        self.TLabel19.place(relx=0.531, rely=0.525, height=25, width=115)
        self.TLabel19.configure(background="#d9d9d9")
        self.TLabel19.configure(foreground="#000000")
        self.TLabel19.configure(font="TkDefaultFont")
        self.TLabel19.configure(relief="flat")
        self.TLabel19.configure(anchor="w")
        self.TLabel19.configure(justify="left")
        self.TLabel19.configure(text="""Plugin Name""")
        self.TLabel19.configure(compound="left")
        self.plugin_name = ttk.Entry(self.top)
        self.plugin_name.place(relx=0.703, rely=0.525, relheight=0.043, relwidth=0.209)
        self.plugin_name.configure(takefocus="")
        self.plugin_name.configure(cursor="arrow")

    def update_pose(self):
        # sdf_file = self.sdf_path.get() #GUIの入力欄に絶対パスを入力
        sdf_file = os.path.join(
            self.sdf, "robot_model.sdf"
        )  # ファイルを絶対パスで指定 SDF PATHの入力欄には入力しない
        abs_sdf_file = os.path.abspath(sdf_file)  # 絶対パス代入
        link_name = self.link_name.get()  # 入力欄の値を代入

        # joint_name = self.joint_name.get()
        x_pos = self.x_position.get()
        y_pos = self.y_position.get()
        z_pos = self.z_position.get()
        roll_pos = self.roll_position.get()
        pitch_pos = self.pitch_position.get()
        yaw_pos = self.yaw_position.get()
        wheel_separation = self.wheel_separation.get()
        wheel_radius = self.wheel_radius.get()

        tree = ET.parse(abs_sdf_file)  # xmlファイル解析　ElementTreeオブジェクト作成
        root = tree.getroot()  # XMLツリーのルート要素を取得

        for link in root.findall(".//link[@name='" + link_name + "']"):  # 以下、入力欄に値が入力された項目だけを変更する処理
            for pose in link.findall(".//pose"):
                pose_parts = pose.text.split(" ")

                if x_pos:
                    pose_parts[0] = x_pos
                if y_pos:
                    pose_parts[1] = y_pos
                if z_pos:
                    pose_parts[2] = z_pos
                if roll_pos:
                    pose_parts[3] = roll_pos
                if pitch_pos:
                    pose_parts[4] = pitch_pos
                if yaw_pos:
                    pose_parts[5] = yaw_pos

                pose.text = " ".join(pose_parts)

        # for joint in root.findall(".//joint[@name='" + joint_name + "']"):
        #    for pose in joint.findall(".//pose"):
        #        pose_parts = pose.text.split(" ")
        #
        #        if x_pos:
        #            pose_parts[0] = x_pos
        #        if y_pos:
        #            pose_parts[1] = y_pos
        #        if z_pos:
        #            pose_parts[2] = z_pos
        #        if roll_pos:
        #            pose_parts[3] = roll_pos
        #        if pitch_pos:
        #            pose_parts[4] = pitch_pos
        #        if yaw_pos:
        #            pose_parts[5] = yaw_pos

        #        pose.text = " ".join(pose_parts)

        plugin_elem = root.find(".//plugin[@name='ignition::gazebo::systems::DiffDrive']")

        wheel_separation_elem = plugin_elem.find("wheel_separation")  # 以下、入力欄に値が入力された項目だけを変更する処理
        if wheel_separation_elem is not None:
            wheel_separation_value = wheel_separation_elem.text.split(" ")
            if wheel_separation:
                wheel_separation_value[0] = wheel_separation
                wheel_separation_elem.text = " ".join(wheel_separation_value)

        wheel_radius_elem = plugin_elem.find("wheel_radius")  # 以下、入力欄に値が入力された項目だけを変更する処理
        if wheel_radius_elem is not None:
            wheel_radius_value = wheel_radius_elem.text.split(" ")
            if wheel_radius:
                wheel_radius_value[0] = wheel_radius
                wheel_radius_elem.text = " ".join(wheel_radius_value)

        tree.write(abs_sdf_file)


def main():
    root = tk.Tk()
    root.title("main window")
    root.geometry("600x480")

    tab = tk.Frame(root)
    tab.pack(expand=True, fill="both", padx=10, pady=10)  # ウィンドウを大きくできる。上下左右の余白を10に設定。

    Toplevel1(tab)
    root.mainloop()


if __name__ == "__main__":
    main()
